// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// application user info
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  blogs         blog[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// outside provider (google, github, etc.)
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

// session state (*not use for email & password Credentials)
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// verify (identifier -> mail)
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}


model blog {
  id         Int        @id @default(autoincrement())
  author_id  String
  author     User       @relation(fields: [author_id], references: [id])
  title      String
  thumbnail  String?     @unique
  body       String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?
  tags       tag[]
  blog_tag   blog_tag[]
}

model tag {
  id        Int        @id @default(autoincrement())
  type      Int
  type_name String
  blogs     blog[]
  blog_tag  blog_tag[]
}

model blog_tag {
  blog_id    Int
  tag_id     Int       @unique
  created_at DateTime  @default(now())
  deleted_at DateTime?
  blog       blog      @relation(fields: [blog_id], references: [id])
  tag        tag       @relation(fields: [tag_id], references: [id])

  @@id([blog_id, tag_id])
}

model contact {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  tel        String
  title      String
  body       String?
  created_at DateTime @default(now())
}
